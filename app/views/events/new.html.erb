<!DOCTYPE html>
<html>
<head>

<style>

div.header{
  margin: 0 auto;
}

h1 {
  text-align: center;

  font-size: 95px;
}




ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
  background-color: #333;
}

li {
float: left;
}

li a {
  display: block;
  color: white;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
}

li a:hover {
background-color: #111;
}

div.back{

}

div.createevent{
background-color: white;
}

div.events{

}

div.message{
  font-size: 30px;
  text-align: center;
}

hr {
  clear:both;
}

</style>

</head>

<body>

  <div class="container">
    <div class="header" style="width:1515px;height:120px;" >
      <h1>Events</h1>
    </div>

<!-- back button -->
<div class = "back">
Date: <%= @schedule.name %> <%= link_to "back", "/schedules/new" %>
</div>

<!-- create event form -->
<div class ="createevent">
<hr>
<%= form_for @event, :url => { :action => :create, :id => @schedule.id} do |f| %>
  Event: <%= f.text_field :event %> <br>
  Priority: <%= f.number_field :priority, min:0, max:10 %> <br>

  <%= f.submit "Create Event" %>
<% end %>
</hr>
</div>


<div class ="events">
    Events <hr></hr>
</div>

  <!---------------------- Algorithm ------------------------>
  <!-- This algorithm takes the events created in the event text_field
       and the priority specified in the number field. First the event
       and priority are both displayed on the page and depending on
       how how the user sets the priority of an event determines the order
       in which the event will show up on the screen using a mergesort.

  <!-- For every item created on the events page do this.. -->

  <% events = [] %>

  <% for item in @schedule.events %>

  <!-- if the event value and priority value does not have anything in it
       do not continue -->
  <% if ((item.event.nil? && item.priority.nil?) == false) %>

  <!-- get the event typed in and the priority specified -->
  <div>
       <%= item.event %>
       <%= item.priority %>
  </div>



  <!-- changing the priority value from a string to an integer -->
  <% s = item.priority %>
  <% i = s.to_i %>

  <!-- takes out irrelevant value from program (0) -->
  <% if (i > 0) %>
  <% events.push(i) %>
  <% end %>

<!-- Old Algorithm -->

<!-- if the priority is low the alert message appears smaller,
     while higher priorities cause the alert message to increase in
     size -->
<!--
  <% if (i <= 2 && item.event.nil? == true) %>
<div style= "font-size: 10px;">
        distant goal
</div>
        <hr > <!-- putting a break line in between events, priorities, and messages.



  <% elsif (i <= 4 && item.event.nil? == true) %>
<div style= "font-size: 15px;">
        not that important
  </div>
        <hr >


  <% elsif (i <= 6 && item.event.nil? == true) %>
<div style= "font-size: 20px;" >
              finish before day ends
</div>
              <hr >


  <% elsif (i <= 8 && item.event.nil? == true) %>
<div style= "font-size: 25px;" >
                I should get to this
</div>
                <hr >


  <% elsif (i <= 10 && item.event.nil? == true) %>
<div style="font-size: 50px;">

                Complete this now!!
</div>
                <hr >


<% end %>
-->

<% end %>
<% end %>


 <% def mergesort(ary)
 #array less than 1 is already sorted
    if ary.count <= 1
        return ary
    end



    # divide and conquer strategy
    #dividing
    middle = ary.count / 2
    div_a = mergesort ary.slice(0, middle)
    div_b = mergesort ary.slice(middle, ary.count - middle)

    #conquering
    ary = []
    offsetA = 0
    offsetB = 0
    while offsetA < div_a.count && offsetB < div_b.count
        a = div_a[offsetA]
        b = div_b[offsetB]

        #the priority that is smaller gets pushed into the array
        if a <= b
            ary << a
            offsetA += 1
        else
            ary << b
            offsetB += 1
        end
    end

    # Making sure there is at least one element left in div_a or div_b
    # but not both at the same time
    while offsetA < div_a.count
        ary << div_a[offsetA]
        offsetA += 1
    end

    while offsetB < div_b.count
        ary << div_b[offsetB]
        offsetB += 1
    end

    return ary
end %>


<!-- showing the events in the order they were entered
     and then proceeding to show them in order of priority -->
<div> <%= events.compact %> </div>
<div> <%= (mergesort events).reverse! %> </div>

<!-- -------------End of algorithm ------------------ -->





<!-- message showing users how to use application -->
<div class ="message">
  <p> Use the textbox above to create events for the day! The higher you set
    the priority, the more likely are to remember an event.
    </p>
</div>

</body>
</html>
